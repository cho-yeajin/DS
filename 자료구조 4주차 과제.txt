{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1. LeetCode 225"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class MyStack(object):\n",
    "    def __init__(self):\n",
    "        self.queue1=[]\n",
    "        self.queue2=[]\n",
    "    def push(self, x):\n",
    "        self.queue2.append(x)\n",
    "        while self.queue1:\n",
    "            self.queue2.append(self.queue1.pop(0))\n",
    "        self.queue1, self.queue2 = self.queue2, self.queue1\n",
    "    def pop(self):\n",
    "        if self.queue1:\n",
    "            return self.queue1.pop(0)\n",
    "        else:\n",
    "            return None\n",
    "    def top(self):\n",
    "        if self.queue1:\n",
    "            return self.queue1[0]\n",
    "        else:\n",
    "            return None\n",
    "    def empty(self):\n",
    "        return not self.queue1\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2. LeetCode 232"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class MyQueue(object):\n",
    "    def __init__(self):\n",
    "        self.stack1=[]\n",
    "        self.stack2=[]\n",
    "    def push(self, x):\n",
    "        self.stack1.append(x)\n",
    "    def pop(self):\n",
    "        if not self.stack2:\n",
    "            while self.stack1:\n",
    "                self.stack2.append(self.stack1.pop())\n",
    "        if self.stack2:\n",
    "            return self.stack2.pop()\n",
    "        return None\n",
    "    def peek(self):\n",
    "        if not self.stack2:\n",
    "            while self.stack1:\n",
    "                self.stack2.append(self.stack1.pop())\n",
    "        if self.stack2:\n",
    "            return self.stack2[-1]\n",
    "        return None\n",
    "    def empty(self):\n",
    "        return not self.stack1 and not self.stack2\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Chapter 7: 큐 문제 다 풀기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class ListQueue:\n",
    "    def __init__(self):\n",
    "        self.__queue=[]\n",
    "    def enqueue(self,x):\n",
    "        self.__queue.insert(0,x)\n",
    "    def dequeue(self):\n",
    "        self.__queue.pop()\n",
    "    def front(self):\n",
    "        return self.__queue[-1]\n",
    "    def isEmpty(self)->bool:\n",
    "        return len(self.__queue)==0\n",
    "    def dequeueAll(self):\n",
    "        self.__queue.clear()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def check_word(a):\n",
    "    if '$' not in a:\n",
    "        return False\n",
    "    q1=[]\n",
    "    for i in range (len(a)):\n",
    "        if a[i]== '$' :\n",
    "            l=i\n",
    "            break\n",
    "        q1.append(a[i])\n",
    "    for j in range(len(q1)):\n",
    "        if l + 1 + j >= len(a):\n",
    "            return False\n",
    "        k = q1.pop(0)\n",
    "        if a[l + 1 + j] != k:\n",
    "            return False\n",
    "    return True\n",
    "k=str(input(\"문자열을 치시오:\"))\n",
    "print(check_word(k))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**6. enqueue(): O(1), dequeue(): O(n)**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**7. enqueue(): O(n), dequeue(): O(1)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class ListQueue:\n",
    "    def __init__(self):\n",
    "        self.__queue = []\n",
    "    def enqueue(self, x):\n",
    "        self.__queue.append(x)\n",
    "    def addfront(self,x):\n",
    "        self.__queue.insert(0, x)\n",
    "    def dequeue(self):\n",
    "        return self.__queue.pop(0)\n",
    "    def deleteFront(self):\n",
    "        if not self.isEmpty():\n",
    "            return self.__queue.pop(0)\n",
    "        else:\n",
    "            return None\n",
    "    def front(self):\n",
    "        if self.isEmpty():\n",
    "            return None\n",
    "        else:\n",
    "            return self.__queue[0]\n",
    "    def isEmpty(self) -> bool:\n",
    "        return (len(self.__queue) == 0)\n",
    "    def dequeueAll(self):\n",
    "        self.__queue.clear()\n",
    "    def printQueue(self):\n",
    "        print(\"Queue from front:\", end=' ')\n",
    "        for i in range(len(self.__queue)):\n",
    "            print(self.__queue[i], end=' ')\n",
    "        print()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "name": "python",
   "version": "3.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
